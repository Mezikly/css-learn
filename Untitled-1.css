/*CSS学习*/
/* 这是注释 */
/*单独CSS文件内不需要style标签，直接书写即可*/
p{
    font-size: large;
    background-color: saddlebrown;
}
/* 声明的值必须是属性对应的,否则整条声明无效 */
    Unkown property/* 属性名未知，即属性名写错 */
    invalid value/* 属性值无效，即属性值写错 */




    
    选择器
        
        标签/元素选择器element{rules;}
            /* p、h1、h2......div、span...... */
            /* 类(class)选择器与id选择器.class{rules;}与#id{rules;} */
                类选择器.class{rules;}
                    <div class=xxx ooo iii></div>
                    <div class=xxx ppp eee></div>
                    <div class=xxx></div>
                    ......
                    .xxx {
                        rules;
                        }/*这个类选择器选择了所有类别(class)中有单词xxx的元素/标签，即选中了上述所有div标签*/
                        /* 优先级同html一样是子元素>父元素 */
                        <div class=aaa><p class=bbb></p></div>
                        .aaa {
                            color:green;
                            }
                        .bbb {
                            color:red;
                            }/*此时p内容文字颜色是red，div内容除开p部分的文字颜色才是green*/
                id选择器#id{rules;},标签的id唯一,所以此选择器只能选择一个标签/元素
                /* 想要选择多数标签用类选择器且给标签起多个类名再类选择器实现多样选择，不要用id选择器 */
        属性选择器 [property=value]{rules}
        <header role="banner">XXXXXXX</header>
        [role="banner"]{text-decorationg:underline;}/*此选择器选中了所有role属性的属性值为role=banner的标签/元素*/
                /* 属性选择器还有不同写法表示不同选择方法(符号^$*~|) */
                [role^="banner"]{}/*符号^表示开始，即此选择器选中的标签是任意含有role属性且role属性的属性值是以banner开头的标签*/
                [role$="banner"]{}/*符号$表示结尾*/
                [role*="banner"]{}/*符号*表示任意，即role属性的属性值任意位置出现过banner即也可以是单词的一部分如something-banner-something*/
                [role~="banner"]{}/*符号~表示但凡即可，即role属性的属性值中存在单独单词banner即可，不可是其他单词的一部分即banner两边要有空格*/
                [role|="banner"]{}/*符号|即vertical bar竖杠，选中的是role属性的属性值是banner或banner-开头的标签/属性，一般用在lang标签，因为常有英国英语lang="en"或美国英语lang="en-US"此时[lang|="en"]即可都选中他们*/
                                /*[role|="banner"]完全等效于[role="banner"]{}和[role^="banner-"]{}两个一起用*/
                [property="value"i]{}/*选择器末尾的i表示不区分大小写*/
        伪类选择器(通过隐藏信息选中元素)
            交互伪类
                :hover{}/* 只要是被鼠标悬浮的元素. */
                :active{}/* 鼠标按住的元素 */
                :focus{}/* 焦点所在的元素 */
            链接伪类
                :link{}/* 选中未被访问过的链接元素 */
                :visited{}/* 选中被访问过的元素 */
            隐含条件伪类
                :first-child{}/* 选中任何元素第一个子元素 */
                :last-child{}/* 选中任何元素最后一个子元素 */
                :only-child{}/* 选中任何有唯一子元素的元素的子元素 */

                :first-of-type{}/* 每种类型在同一层级的第一个标签 */

                :nth-child(2){}/* 选中任何元素的第2个子元素/子结点，同理有nth-child(3)、nth-child(4)...... */
                :nth-last-child(2){}/* 选中任何元素的倒数第2个子元素 */
                :nth-child(2n){}/* 选中任何元素的子元素中第2n个子结点（n从0开始） */
                :nth-child(odd){}/* odd:奇数 */
                :nth-child(even){}/* even:偶数 */
                /* nth:第几个。1st,2nd,3rd,4th,5th...... */
                :empty{}/* 选中内容为空（空格也不能有）的元素 */
                :not(xxxx){}/* 选中不满足xxxx条件的元素，如:not(:empty){}、not(p){}、not(:first-child){}...... */
            表单交互伪类
            :checked{}/* 选中被check即勾上的表单元素,如<input type="checkbox">与<input type="radio">有样式:checked{ zoom:2; }那么勾选上时就会放大2倍 */
            :enabled{}/* 选中被启用的表单元素 */
            :disabled{}/* 选中禁用的表单元素 */
            :valid{}/:invalid{}/* 选中填写正确/填写不正确的表单项，依赖于html自己的验证机制，限制太大，不常用 */
            :required{}/:optional{}/* 选中必填/可选填的表单项 */

            !!!!!!这些选择器选择的元素类别取决于最父级的选择器,或者说单词位置不同扮演的角色和起的作用不同,如:enabled{}只能选中表单元素且是被启用的“表单元素”,但:not(:enabled){}此时:enabled是条件而不是选择器,所以它选中了所有的被启用的“元素”





    选择器的组合
        层级选择器
        空格的使用表示后代
        A B C D E{}/* 满足A条件的元素的后代（子，孙，曾孙......）中满足条件B的元素的后代中满足条件C的元素的后代中满足D的元素的后代中满足E的元素 */
        复合选择器
        无缝衔接
        ABCDE{}/* 同时满足ABCDE所有条件的元素 */
        理解一个完整条件是.xxx或:xxx或[xxxx]或#xxx......或很多条件一起视为一个完整条件
        当然可以层级与复合选择器层叠使用
        AB C DEF G H IJKLM N......
        实现特定标签的定向选择



        A > B{}/* 满足A条件的元素的子元素中满足B条件的元素 */
        A + B{}/* 满足A条件的元素紧接着满足B条件的元素，两元素是一前一后兄弟元素且选中的是后边的元素 */
        A ~ B{}/* 满足A条件的元素后面的满足B条件的同辈元素,不要求紧挨着但一定在满足A条件的元素后面 */
        A , B{}/* 满足A的元素和满足B的元素，完全等价于A{}和B{}合体 */
        以上这些符号出现则重新从头写条件，前后条件无相关性或者说不互相影响


        选择器的优先级/明确性(越精准越优先)
        当多个选择器选中同个标签，哪个优先级高？
            三元数组计算比较权重,即将“优先级”数值化,即每个选择器写好的那个时刻,它的优先级即确认为了一个三元数组,这个三元数组的计算:
            初始为(0,0,0),当这个选择器结构内:
                每有一个id选择器,第一位加一
                每有一个类、伪类选择器,第二位加一
                每有一个标签选择器,第三位加一
            多个选择器比较优先级时,比较这个三元数组,从左至右开始比较,三元数组完全相同即优先级相同时,谁出现在后面,谁生效(后覆盖前)
            A>B>C>D...结构中,如果有选择器选中了A并实现一些效果,A作为最父级元素,其子元素及后代将"继承"这些效果,但是如果同时有其他选择器选中了A的子元素or后代,并起与"选择A的选择器起的效果"相互冲突的效果,此时两选择器起效的优先级为子>父(越精准越优先)
            也有说四元数组(0,0,0,0)的,是因为*{}选择器的优先级确实是(0,0,0,0)
            继承样式没有优先级
            "没有优先级"也是一种优先级,它比(0,0,0,0)还要靠后
        !important规则属性
            有!important的选择器规则的优先级永远比没有的选择器的优先级高,都有时再比较选择器的优先级
            例如*{xxx : oooo !important;......}优先级高于p{......}
        优先级不会继承
    样式的继承规则可以来自经验,因为继承与否几乎总是符合直觉

    divtools中用户代理样式表中表示标签在浏览器上自带的样式表(内置样式),浏览器内置样式优先级比"没有优先级"还要低



    值与单位
        纯数字
            line-height: 2.2;
            animation-iteration-count: 2;
            zoom: 1.8927386;(floating point number 浮点数)
            zoom: .29874819;
            colum-count: 5;
            z-index:8;
            order: 2;
        百分比(一般用在长、宽等长度属性,相对于的基准值是具体标签的默认属性值)
            width/height: 59%;
            top/left/right/bottom: 50%;
            margin-top: 59%;
            font-size: 200%;
            line-height:120%;
            vertical-align: 40%;
            color: rgb(40%,50% 70%)颜色的rgb百分比相对于基准是(255,255,255)即百分比是红/黄/蓝灯亮度的百分比
        多数情况百分比与纯数字不能互换

        颜色(R G B)的多种表示方法
            部分有自己独立英语单词的简单颜色可以直接值为单词
                color: red;
                red/blue/green/tan/brown/teal/grey/maroon/silver/yellow/aqua/lime
                lightgreen/lightpink/lightblue/darkblue
                    事实上大多数情况因为它们颜色单调不够绚丽而用不上,但是可以在写demo时用来炫技
            十进制
                #HHHHHH 即#(0-255)(0-255)(0-255),如#959374651
            hex color颜色也可以十六进制表示
                #RRGGBB
                #RRGGBBAA(AA即十六进制数表示的透明度,从00到FF共256个级别的透明度)
                数字重复的简单情况可简写
                #f30   即表示#ff3300
                #abcd   即表示#aabbccdd
                也可以以规则形式
                color: rgb(255,255,255,xx%/*透明度,可写可不写*/);
                color: rgba(255,255,255,50%);/*为了方便，rgba被合并在了上面的rgb里所以rgb形式可以自由加透明度*/
                color: rgba(255,255,255,.5)/*百分比大多数情况都能转换成小数，此处50%转换成了0.5，0.5的0被省略，编程的很多地方的0都可以省略*/
            
            hsl(色相hue,饱和度saturate,明度light/*可加透明度*/)
            hsla(色相,饱和度,明度,透明度)
            色相的数字其实表示一个度数(色彩空间的度数，见下文),所以它的范围理应在0-360
            饱和度与明度都是百分比,即可以转换成小数


            色彩空间
            rgb与hsl都是一种"色彩空间"(色彩的数学模型,即色彩的特定表达形式)
            rgb的色彩空间即引红黄蓝为xyz轴投射出的一个立方体空间,其中每一个点都是一个颜色
            hsl的色彩空间引一个原点为白色,即所有颜色的饱和度最低都是白色,每一条半径为一种颜色,越往外发散饱和度越高,所以每层的最外圆周上的点是色相本身,
                所以度数可以表示圆周这个度数上的对应半径发散出投射到最外圆周上的点，即可以用度数来表示色相,然后整个圆面作为中间层开始往下叠层,越往下一
                层亮度越低,最底一面为全黑,即所有颜色亮度最低都是黑色,中间层往上叠层越往上叠层亮度越高，最顶一层为全白
            色域---屏幕能显示颜色的范围




                
            
            







        


        


        