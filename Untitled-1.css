/*CSS学习*/
/* 这是注释 */
/*单独CSS文件内不需要style标签，直接书写即可*/
p{
    font-size: large;
    background-color: saddlebrown;
}
/* 声明的值必须是属性对应的,否则整条声明无效 */
    Unkown property/* 属性名未知，即属性名写错 */
    invalid value/* 属性值无效，即属性值写错 */




    
    选择器
        
        标签/元素选择器element{rules;}
            /* p、h1、h2......div、span...... */
            /* 类(class)选择器与id选择器.class{rules;}与#id{rules;} */
                类选择器.class{rules;}
                    <div class=xxx ooo iii></div>
                    <div class=xxx ppp eee></div>
                    <div class=xxx></div>
                    ......
                    .xxx {
                        rules;
                        }/*这个类选择器选择了所有类别(class)中有单词xxx的元素/标签，即选中了上述所有div标签*/
                        /* 优先级同html一样是子元素>父元素 */
                        <div class=aaa><p class=bbb></p></div>
                        .aaa {
                            color:green;
                            }
                        .bbb {
                            color:red;
                            }/*此时p内容文字颜色是red，div内容除开p部分的文字颜色才是green*/
                id选择器#id{rules;},标签的id唯一,所以此选择器只能选择一个标签/元素
                /* 想要选择多数标签用类选择器且给标签起多个类名再类选择器实现多样选择，不要用id选择器 */
        属性选择器 [property=value]{rules}
        <header role="banner">XXXXXXX</header>
        [role="banner"]{text-decorationg:underline;}/*此选择器选中了所有role属性的属性值为role=banner的标签/元素*/
                /* 属性选择器还有不同写法表示不同选择方法(符号^$*~|) */
                [role^="banner"]{}/*符号^表示开始，即此选择器选中的标签是任意含有role属性且role属性的属性值是以banner开头的标签*/
                [role$="banner"]{}/*符号$表示结尾*/
                [role*="banner"]{}/*符号*表示任意，即role属性的属性值任意位置出现过banner即也可以是单词的一部分如something-banner-something*/
                [role~="banner"]{}/*符号~表示但凡即可，即role属性的属性值中存在单独单词banner即可，不可是其他单词的一部分即banner两边要有空格*/
                [role|="banner"]{}/*符号|即vertical bar竖杠，选中的是role属性的属性值是banner或banner-开头的标签/属性，一般用在lang标签，因为常有英国英语lang="en"或美国英语lang="en-US"此时[lang|="en"]即可都选中他们*/
                                /*[role|="banner"]完全等效于[role="banner"]{}和[role^="banner-"]{}两个一起用*/
                [property="value"i]{}!!!选择器末尾的i表示不区分大小写!!!
        伪类选择器(通过隐藏信息选中元素)
            交互伪类
                :hover{}/* 只要是被鼠标悬浮的元素. */
                :active{}/* 鼠标按住的元素 */
                :focus{}/* 焦点所在的元素 */
            链接伪类
                :link{}/* 选中未被访问过的链接元素 */
                :visited{}/* 选中被访问过的元素 */
                ！！！！！！！这些条件所指向的状态有兼容关系,即可能会导致同时处于多个状态而使标签被多个选择器同时选中生效,从而带来优先级问题。解决方法一般为改变书写顺序来调整优先级（下文优先级内容提到优先级数相同谁排后谁优先级高）
                    例如a标签有:link、:visited、:hover、:active、:focus五种状态,为了解决各个状态选择器生效优先级的问题,一般以lvfha的顺序为五个状态书写优先级数相同的五个选择器
            隐含条件伪类
                :first-child{}/* 选中任何元素第一个子元素 */
                :last-child{}/* 选中任何元素最后一个子元素 */
                :only-child{}/* 选中任何有唯一子元素的元素的子元素 */

                :first-of-type{}/* 每种类型在同一层级的第一个标签 */

                :nth-child(+/-xn+x)/* x为常数，如:nth-child（-n+25）选中了前25个元素 */
                :nth-child(2){}/* 选中任何元素的第2个子元素/子结点，同理有nth-child(3)、nth-child(4)...... */
                :nth-last-child(2){}/* 选中任何元素的倒数第2个子元素 */
                :nth-child(2n){}/* 选中任何元素的子元素中第2n个子结点（n从0开始） */
                :nth-child(odd){}/* odd:奇数 */
                :nth-child(even){}/* even:偶数 */
                /* nth:第几个。1st,2nd,3rd,4th,5th...... */
                :empty{}/* 选中内容为空（空格也不能有）的元素 */
                :not(xxxx){}/* 选中不满足xxxx条件的元素，如:not(:empty){}、not(p){}、not(:first-child){}...... */
            表单交互伪类
            :checked{}/* 选中被check即勾上的表单元素,如<input type="checkbox">与<input type="radio">有样式:checked{ zoom:2; }那么勾选上时就会放大2倍 */
            :enabled{}/* 选中被启用的表单元素 */
            :disabled{}/* 选中禁用的表单元素 */
            :valid{}/:invalid{}/* 选中填写正确/填写不正确的表单项，依赖于html自己的验证机制，限制太大，不常用 */
            :required{}/:optional{}/* 选中必填/可选填的表单项 */

            !!!!!!这些选择器选择的元素类别取决于最父级的选择器,或者说单词位置不同扮演的角色和起的作用不同,如:enabled{}只能选中表单元素且是被启用的“表单元素”,但:not(:enabled){}此时:enabled是条件而不是选择器,所以它选中了所有的被启用的“元素”





    选择器的组合
        层级选择器
        空格的使用表示后代
        A B C D E{}/* 满足A条件的元素的后代（子，孙，曾孙......）中满足条件B的元素的后代中满足条件C的元素的后代中满足D的元素的后代中满足E的元素 */
        复合选择器
        无缝衔接
        ABCDE{}/* 同时满足ABCDE所有条件的元素 */
        理解一个完整条件是.xxx或:xxx或[xxxx]或#xxx......或很多条件一起视为一个完整条件
        当然可以层级与复合选择器层叠使用
        AB C DEF G H IJKLM N......
        实现特定标签的定向选择


        A   B{}/* 满足A条件的元素的“后代”中满足B条件的元素，后代即子孙后代，包含子元素，孙元素，曾孙元素......*/
        A > B{}/* 满足A条件的元素的“子元素”中满足B条件的元素 */

        A + B{}/* 满足A条件的元素紧接着满足B条件的元素，两元素是一前一后兄弟元素且选中的是后边的元素 */
        A ~ B{}/* 满足A条件的元素后面的满足B条件的同辈元素,不要求紧挨着但一定在满足A条件的元素后面 */

        A , B{}/* 满足A的元素“和”满足B的元素，完全等价于A{}和B{}合体 */
        AB{}   /* 满足A的元素“且”满足B的元素 */
        以上这些符号注意逗号,不会影响后面条件的筛选，出现则重新从头写条件，前后条件无相关性或者说不互相影响
                例如: <div class="a">
                        <li>一</li>
                        <li>二</li>
                        <li>三</li>
                        <li>四</li>
                        <li>五</li>
                        <li>六</li>
                    </div>
                    我要选中一就写div.a li{}
                    我想同时选中4567不能写div.a li:nth-child(4) , nth-child(5) , nth-child(6) , :nth-child(7){}
                    逗号前面的div.a条件不会继承给逗号后面,所以正确写法为 div.a li:nth-child(4) , div.a li:nth-child(5) , div.a li:nth-child(6) , div.a li:nth-child(7){}
                    所以,逗号出现就把他看成多个选择器,计算优先级是也是如此,A , B , C , D{}在具体标签上计算优先级时候如果只是D的条件选中了那个具体标签,计算的优先级应该是D{}的优先级


        选择器的优先级/明确性(越精准越优先)
        当多个选择器选中同个标签，哪个优先级高？
            三元数组计算比较权重,即将“优先级”数值化,即每个选择器写好的那个时刻,它的优先级即确认为了一个三元数组,这个三元数组的计算:
            初始为(0,0,0),当这个选择器结构内:
                每有一个id选择器,第一位加一
                每有一个类、伪类选择器,第二位加一
                每有一个标签选择器,第三位加一
            多个选择器比较优先级时,比较这个三元数组,从左至右开始比较,三元数组完全相同即优先级相同时,谁出现在后面,谁生效(后覆盖前)
            A>B>C>D...结构中,如果有选择器选中了A并实现一些效果,A作为最父级元素,其子元素及后代将"继承"这些效果,但是如果同时有其他选择器选中了A的子元素or后代,并起与"选择A的选择器起的效果"相互冲突的效果,此时两选择器起效的优先级为子>父(越精准越优先)
            也有说四元数组(0,0,0,0)的,是因为*{}选择器的优先级确实是(0,0,0,0)
            继承样式没有优先级
            "没有优先级"也是一种优先级,它比(0,0,0,0)还要靠后
        !important规则属性
            有!important的选择器规则的优先级永远比没有的选择器的优先级高,都有时再比较选择器的优先级
            例如*{xxx : oooo !important;......}优先级高于p{......}
        优先级不会继承
    样式的继承规则可以来自经验,因为继承与否几乎总是符合直觉

    divtools中用户代理样式表中表示标签在浏览器上自带的样式表(内置样式),浏览器内置样式优先级比"没有优先级"还要低



    值与单位
        纯数字
            line-height: 2.2;
            animation-iteration-count: 2;
            zoom: 1.8927386;(floating point number 浮点数)
            zoom: .29874819;
            colum-count: 5;
            z-index:8;
            order: 2;
        百分比(一般用在长、宽等长度属性,相对于的基准值是具体标签的默认属性值)
            width/height: 59%;
            top/left/right/bottom: 50%;
            margin-top: 59%;
            font-size: 200%;
            line-height:120%;
            vertical-align: 40%;
            color: rgb(40%,50% 70%)颜色的rgb百分比相对于基准是(255,255,255)即百分比是红/黄/蓝灯亮度的百分比
        多数情况百分比与纯数字不能互换

        颜色(R G B)的多种表示方法
            部分有自己独立英语单词的简单颜色可以直接值为单词
                color: red;
                red/blue/green/tan/brown/teal/grey/maroon/silver/yellow/aqua/lime
                lightgreen/lightpink/lightblue/darkblue
                    事实上大多数情况因为它们颜色单调不够绚丽而用不上,但是可以在写demo时用来炫技
            十进制
                #HHHHHH 即#(0-255)(0-255)(0-255),如#959374651
            hex color颜色也可以十六进制表示
                #RRGGBB
                #RRGGBBAA(AA即十六进制数表示的透明度,从00到FF共256个级别的透明度)
                数字重复的简单情况可简写
                #f30   即表示#ff3300
                #abcd   即表示#aabbccdd
                也可以以规则形式
                color: rgb(255,255,255,xx%/*透明度,可写可不写*/);
                color: rgba(255,255,255,50%);/*为了方便，rgba被合并在了上面的rgb里所以rgb形式可以自由加透明度*/
                color: rgba(255,255,255,.5)/*百分比大多数情况都能转换成小数，此处50%转换成了0.5，0.5的0被省略，编程的很多地方的0都可以省略*/
            
            hsl(色相hue,饱和度saturate,明度light/*可加透明度*/)
            hsla(色相,饱和度,明度,透明度)
            色相的数字其实表示一个度数(色彩空间的度数，见下文),所以它的范围理应在0-360
            饱和度与明度都是百分比,即可以转换成小数


            色彩空间
            rgb与hsl都是一种"色彩空间"(色彩的数学模型,即色彩的特定表达形式)
            rgb的色彩空间即引红黄蓝为xyz轴投射出的一个立方体空间,其中每一个点都是一个颜色
            hsl的色彩空间引一个原点为白色,即所有颜色的饱和度最低都是白色,每一条半径为一种颜色,越往外发散饱和度越高,所以每层的最外圆周上的点是色相本身,
                所以度数可以表示圆周这个度数上的对应半径发散出投射到最外圆周上的点，即可以用度数来表示色相,然后整个圆面作为中间层开始往下叠层,越往下一
                层亮度越低,最底一面为全黑,即所有颜色亮度最低都是黑色,中间层往上叠层越往上叠层亮度越高，最顶一层为全白
            色域---屏幕能显示颜色的范围


            CMYK
            像rgb,hsl,hsv(浏览器还不支持),都是自发光设备的颜色表示方法,而打印设备打印的纸张内容颜色需要外光源照射才能显示,所以有CMYK这种一般用在打印
                设备的颜色表示方法(Cyan蓝绿色 magenta洋红色 yellow黄色 black黑色/墨色)




        布局

        长度单位/绝对长度(不常用,各个显示器分辨率及配置不一导致不准确使得布局乱套,常用在打印时)
            in(ch)英寸
            cm
            mm
            pt point 七十二分之一inch
            pc pica 六分之一inch


        屏幕相关单位/相对长度单位
            px(css像素,已成抽象单位,即预览仅供参考,按实际情况为准)
                像素灯的大小随着科技or屏幕发展越来越小,屏幕设置的缩放选项实际上是将显示内容属性的像素长度缩放,否则将变为实际数量像素灯长度,将导致内容不便
                浏览,一般按缩放比例转换后重新渲染,直接放大/缩小会存在锯齿等现象
            em(当前定义元素尺寸单位) element's measurement
                当前元素生效的(选中当前元素的优先级最高的选择器所写的)font-size的大小(像素)定义em单位
                例如div{
                    font-size: 100px;
                    width: 2em;
                    height: 3em;
                       }中1em=100px,！！！注意此时若font-size写的值是像2em这样的计算式,那么font-size的em取的是这个标签父元素的font-size值,而width的em取的值则是此标签的font-size的计算值
            rem(根定义元素尺寸单位) root element's measurement
                根元素的font-size大小定义rem单位,即html根标签的font-size大小,html根标签的默认font-size是16px
            vx
                x字符的高度
            ch
                0字符的宽度
            
            
            vw/vh
                viewport width/height
                1vw/vh=1*视口(整个网页/显示区域,包含滚动条)宽/高度的百分之一
            
            vmax/vmin
                1vmax=max(1vw,1vh)二者取大
                1vmin=min(1vw,1vh)二者取小
            
        计算值
            calc(xxx + - * / ooo);/* xxx与ooo可以是纯数字/百分比/单位,十分灵活 */
            例如wdith:calc(114vm - 514px);
            wdith:calc(472em * 248 - 5%);
            wdith:calc(248em * 374 / 24);
            wdith:calc(247px + 89%);
            ！！！运算符的两边一定要打空格

        角度
            deg degree角度
            45deg 90deg
            sin(pi/4)
            rad弧度radian  pi=3.14rad=180deg  90deg=pi/2
            turn圈数 1turn=360deg
            transform:rotate(180deg);
            transform:rotate(3.14rad)



        时间
        s秒 ms毫秒


        频率
        赫兹hz 每秒振动/变换次数


        URL链接/相对路径
            必须将链接/路径本体包在括号中且！！！！不能出现引号！！！！
            url(xxx.ooo)
            url(1643821.png)
            url(xxxx://iowhdai/ihjeia)
            url(xxxx://oe@server/pathname?a=b&c=d)
            url(/zdfcawe/zdawe/zdawe.jpg)
            相对路径相对于这句代码所在文件的所在文件夹


        css关键字(非数值的属性值)
            关键字如中文的"没有","不出现","显示","锁定"等提示状态的字眼一样,种类较少且不同选择器可写的关键字不同
            不同选择器的关键字即使单词相同,呈现效果一般也天差地别
            display: block;
            display: none/block/inline/inline-block/table/table-cell ;
            background-color: currentcolor;
            font-size: inherit;/*inherit继承,从妈妈“她”肚子“里面”生出来的儿子会“继承”*/
            border-style: solid/dotted/dashed/ridge;/*solid固体、实心的dotted斑点状、星罗棋布的dashed猛击、俯冲ridge隆起的、山脊状*/
            none/*注意不是0，None和0从来都不能划等号*/
            inherit/reset/initial/unset
            属性接受了关键字,那么此关键字将被指定为此属性专门的关键字,与别的属性的关键字即使单词相同也互相独立毫不相干
                letter-spacing: normal;
                font-style: normal;
                这两个normal的效果、意义及行为完全不一样


        字符串(一串引号引起来的特殊内容)
            content: 'ffoo\6211oo'  "sjdhiw  sndiw  -=dknaiwed"   "nskahe";/* content所容纳之物 */


        取属性的值(一般是各种函数)
            content: attr(href)/*attr--attrack指向*/
            transform: rotate(30deg) skew(50deg) matrix(1,2,3,4,5,6...)/*skew歪斜matrix矩阵*/











    字体
        font-family: 字体名, 备用字体名1, 备用字体名2......serif,monospace;/* 这个写法的字体一定得是用户端已经有的字体，显示内容不支持首选字体时往下排备用字体用 */serif表示衬线字体,在字的笔画开始
            和结束的地方有额外的装饰,笔画的粗细也有所不同。与sans-Serif(非衬线字体)字体相比,Serif字体更容易识别,因为它们强调了每个字母笔画的开始和结束,从而提高了易读性‌
            monospace等宽字体
        font-weight:bold/light/border/lighter/normal;字重,为字体加粗/变细,也可以填精确数值设计粗细,字体最多设计100-900九种粗细(只有100的整数倍)
        font-size:字体长度单位;
            也有x-large、xx-large等写法但这些单词没有统一的精确的标准,所以避免使用。一般都使用48px,294em这些精确单位
            也可写百分比,尽量避免,会和em一样出现标签嵌套时的错误叠加
            综上,尽量直接指定px抽象像素值
        font-style:italic/normal/oblique;斜体/正常/倾斜体/* italic是专门设计的一种斜体字，oblique则是将字体直接倾斜 */
        font-variant:normal/small-caps;默认normal字体正常不变形,small-caps将小写字母变形成小号的大写字母,仅在显示层面变化
        line-height:1/2/3;几倍行高
        以上都可以将属性值写在一个font属性里,但不仅对书写顺序有要求,还将覆盖前面已经书写的以上属性(因为被视为了以上同名属性的叠加,同名属性在后面的优先级高),可能带来新的布局问题如寻找问题根源的困难所以不建议




    文章与排版
        缩进
        text-indent:2em,文本首行缩进一定长度单位/百分比/负值(首行突进)
                隐藏文字内容的一定方法:设置的负值足够小时(如-99999em)所有的内容都能被一容纳甚至隐藏在页面屏幕左边边界外(因为是往右边缩进,负值就是往左突进)
        水平对齐
        text-align:right/left/center/justify;/* justify调整使两端对齐/全行排齐，不会排齐最后一行，最后一行强行排齐用的是text-align-last：justify； */
        垂直方向上的对齐(几乎不用)
        vertival-align:super/top/bottom/middle/sub/23px/30px......
            只能给块元素用,实际上是在竖直方向移动来进行对齐,移动时会将整一行的高度撑高
        行高(几乎不用)
        line-height:长度单位;文字在整一行居中,行高是每一行的高度,数值上等于每一行中线之间的距离或字号的2倍,一般设置了字号等就不另外设置行高,会影响字号
        单词间隙(几乎不用)
        word-spacing:长度单位;默认的单词间隙有一个空格,设置的数值会加上这个空格,所以一般不额外设置字间隙
        字(母)间隙
        letter-spacing:长度单位;

        




        


        




















        
            
            







        


        


        